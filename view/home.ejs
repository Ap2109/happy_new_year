<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tạo Lời Chúc Năm Mới 2025</title>
    <link rel="stylesheet" href="assets/css/home.css">
    <link rel="icon" type="image/x-icon" href="assets/images/favicon.ico">
    <meta property="og:title" content="Tạo Lời Chúc Năm Mới 2025">
    <meta property="og:description" content="Tạo và gửi những lời chúc năm mới ý nghĩa đến người thân yêu">
    <meta property="og:image" content="assets/image/bgr.jpg">
    <meta property="og:url" content="https://happy-new-year-for-you.vercel.app/">
</head>
<body>
    <div class="firework"></div>
    <div class="lantern" style="top: 20px; right: 20px;"></div>

    <div class="loading" id="loading">
        <div class="loading-spinner"></div>
    </div>

    <div class="container">
        <div class="home-content" id="homeContent">
            <h1>🎊 Chào Mừng Năm Mới 2025 🎊</h1>
            <div class="lunar-year">Năm Ất Tỵ</div>
            
            <p class="description">
                Hãy gửi những lời chúc tốt đẹp nhất đến người thân yêu của bạn trong năm mới này. 
                Tạo một thiệp chúc mừng năm mới độc đáo và ý nghĩa để gửi tới những người special trong cuộc đời bạn.
            </p>

            <button onclick="showWishForm()" class="cta-button">
                🎋 Tạo Lời Chúc Ngay 🎋
            </button>
            <a href="/hny/0" class="cta-button">
                🎉 Xem Demo 🎉
            </a>

            <p class="description">
                Năm mới Ất Tỵ 2025 đang đến gần! <br>
                Hãy là người đầu tiên gửi những lời chúc tốt đẹp nhất đến người thân và bạn bè! ❤️
            </p>
        </div>

        <div class="form-container" id="formContainer">
            <h1>🎊 Tạo Lời Chúc Năm Mới 🎊</h1>
            <div class="lunar-year">Năm Ất Tỵ 2025</div>

            <form id="wishForm">
                <div class="form-group">
                    <label for="name">👋 Tên người chúc:</label>
                    <input type="text" id="name" name="name" required placeholder="Nhập tên hoặc bí danh của bạn">
                </div>

                <div class="form-group">
                    <label for="title">✨ Tiêu đề lời chúc:</label>
                    <input type="text" id="title" name="title" required placeholder="Nhập tiêu đề cho lời chúc">
                </div>

                <div class="form-group">
                    <label for="content">🎋 Nội dung lời chúc:</label>
                    <textarea id="content" name="content" required placeholder="Nhập nội dung lời chúc năm mới"></textarea>
                </div>

                <div class="form-group">
                    <label for="image">🖼️ Hình ảnh của người nhận:</label>
                    <input type="file" id="image" name="image" required accept="image/*" onchange="previewImage(event)">
                    <div class="image-preview" id="imagePreview">
                        <img id="imagePreviewImg" src="" alt="Preview">
                    </div>
                </div>

                <button type="submit" class="cta-button">🎉 Gửi Lời Chúc 🎉</button>
            </form>
        </div>

        <div id="successMessage">
            <h2 style="color: #e74c3c;">🎉 Chúc mừng! Lời chúc của bạn đã được tạo thành công! 🎉</h2>
            <p style="font-size: 18px; margin: 20px 0;">Link lời chúc của bạn là:</p>
            <div id="wishLink" style="padding: 15px; background: #f1c40f; border-radius: 8px; margin: 10px 0; cursor: pointer;" onclick="copyToClipboard(this.textContent)"></div>
            <p style="font-size: 16px; color: #7f8c8d;">Nhấn vào link trên để copy và gửi cho người thân yêu của bạn nhé! ❤️</p>
            <p style="color: #7f8c8d;">Lưu ý: Web sẽ đếm ngược tới năm mới, sau đó mới hiển thị lời chúc của bạn.</p>
            <script>
            function copyToClipboard(text) {
                navigator.clipboard.writeText(text).then(() => {
                    alert('Đã copy link thành công!');
                }).catch(err => {
                    console.error('Không thể copy: ', err);
                });
            }
            </script>
        </div>
    </div>

    <div class="donate-box">
        <img src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=00020101021138620010A00000072701320006970454011899MM24044M620822530208QRIBFTTA53037045802VN62190515MOMOW2W620822536304AABA" alt="Mã QR Ủng hộ">
        <div class="donate-text">💝 Ủng hộ tôi một ly cà phê 💝</div>
    </div>

<script>
    const api_key = "<%= api_key %>";
</script>
<script>
    let imageBase64 = null;

        function createFirework() {
            const firework = document.createElement('div');
            firework.className = 'firecracker';
            firework.style.left = Math.random() * window.innerWidth + 'px';
            firework.style.background = `hsl(${Math.random() * 360}, 100%, 50%)`;
            document.querySelector('.firework').appendChild(firework);

            setTimeout(() => {
                firework.remove();
            }, 3000);
        }

        function showWishForm() {
            const homeContent = document.getElementById('homeContent');
            const formContainer = document.getElementById('formContainer');

            homeContent.classList.add('hide');

            setTimeout(() => {
                homeContent.style.display = 'none';
                formContainer.style.display = 'block';

                // Trigger reflow
                formContainer.offsetHeight;

                formContainer.classList.add('show');
            }, 500);
        }

        setInterval(createFirework, 300);

        function previewImage(event) {
            const preview = document.getElementById('imagePreview');
            const previewImg = document.getElementById('imagePreviewImg');
            const file = event.target.files[0];

            if (file) {
                // Create an image element for compression
                const img = new Image();
                const reader = new FileReader();

                reader.onload = function () {
                    if (reader.result) {
                        img.src = reader.result.toString();
                        img.onload = function () {
                            // Create canvas for compression
                            const canvas = document.createElement('canvas');
                            const ctx = canvas.getContext('2d');

                            if (!ctx) {
                                console.error('Could not get canvas context');
                                return;
                            }

                            // Calculate new dimensions (max width/height of 800px)
                            let width = img.width;
                            let height = img.height;
                            const maxSize = 600;

                            if (width > height && width > maxSize) {
                                height = Math.round((height * maxSize) / width);
                                width = maxSize;
                            } else if (height > maxSize) {
                                width = Math.round((width * maxSize) / height);
                                height = maxSize;
                            }

                            // Set canvas dimensions
                            canvas.width = width;
                            canvas.height = height;

                            // Draw and compress image
                            ctx.drawImage(img, 0, 0, width, height);

                            // Convert to base64 with reduced quality
                            const compressedBase64 = canvas.toDataURL('image/jpeg', 0.6);

                            // Update preview and store compressed base64
                            if (previewImg) {
                                previewImg.style.display = 'block';
                                previewImg.setAttribute('src', compressedBase64);
                                imageBase64 = compressedBase64;
                            }
                        }
                    }
                }
                reader.readAsDataURL(file);
            }
        }

        document.getElementById('wishForm')?.addEventListener('submit', async function (e) {
            e.preventDefault();

            const loadingEl = document.getElementById('loading');
            const formContainerEl = document.getElementById('formContainer');
            const successMessageEl = document.getElementById('successMessage');
            const wishLinkEl = document.getElementById('wishLink');
            const nameInput = document.getElementById('name');
            const titleInput = document.getElementById('title');
            const contentInput = document.getElementById('content');
            const imageInput = document.getElementById('image');

            if (!nameInput || !titleInput || !contentInput || !imageInput ||
                !loadingEl || !formContainerEl || !successMessageEl || !wishLinkEl) {
                alert('Có lỗi xảy ra: Không tìm thấy các trường form');
                return;
            }

            // Validate input
            if (!nameInput.value || !titleInput.value || !contentInput.value || !imageInput.files[0]) {
                alert('Vui lòng điền đầy đủ thông tin và chọn hình ảnh');
                return;
            }

            // Show loading spinner
            loadingEl.classList.add('show');

            try {
                const formData = new FormData();
                formData.append('name', nameInput.value);
                formData.append('title', titleInput.value);
                formData.append('content', contentInput.value);
                formData.append('image', imageInput.files[0]);

                const response = await fetch('/api/v1/saveData', {
                    method: 'POST',
                    headers: {
                        'x-api-key': api_key
                    },
                    body: formData
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Network response was not ok');
                }

                const result = await response.json();

                if (result.error === 0) {
                    formContainerEl.style.display = 'none';
                    successMessageEl.style.display = 'block';

                    wishLinkEl.innerHTML = `${window.location.origin}/${result.id}`;
                    wishLinkEl.href = `${window.location.origin}/${result.id}`;
                } else {
                    alert('Có lỗi xảy ra: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi gửi lời chúc: ' + error.message);
            } finally {
                loadingEl.classList.remove('show');
            }
        });
</script>
</body>
</html>
